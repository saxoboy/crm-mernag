enum Roles {
  ADMIN
  USER
}

type User {
  id: ID
  name: String
  username: String
  email: String
  photo: String
  password: String
  created_at: Date
  updated_at: Date
  role: Roles
  status: Boolean
}
type UserLogin {
  id: ID
  name: String
  username: String
  email: String
  photo: String
  role: Roles
}

input UserInput {
  name: String!
  username: String!
  email: String!
  password: String
  created_at: Date
  updated_at: Date
  role: Roles!
}

input UserInputInfo {
  name: String!
  username: String!
  email: String!  
  updated_at: Date
  role: Roles!
}

input UserInputPhoto {  
  photo: String!
  updated_at: Date
}

input UserInputPassword {  
  password: String!
  updated_at: Date
}

extend type Query {
  getUsers(since: Int, limit: Int): [User]
  getUser(id: ID): User
  me: UserLogin
}

extend type Mutation {
  createUser(input: UserInput!): Response  
  updateInfoUser(id: ID!, input: UserInputInfo!): Response
  updatePhotoUser(id: ID!, input: UserInputPhoto!): Response
  updatePasswordUser(id: ID!, input: UserInputPassword!): Response
  deleteUser(id: ID!): Response
}

extend type Subscription {
  newUser: User!
  updateInfoUser: User!  
}

#updateUser(id: ID!, input: UserInput!): Response //mutation
#updateUser: User! //suscripcion